/* eslint-disable no-unused-vars */
const Service = require("./Service");
const fetch = require("node-fetch");
const jwt = require("jsonwebtoken");
const deepai = require("deepai");
const { htmlToText } = require("html-to-text");
const { db, Summary, User } = require("../db/psql.js");

deepai.setApiKey(process.env.DEEPAI_KEY);

/**
 * Call DeepAI to summarize raw text or a webpage. Summary is saved under user's profile.
 * TODO: Make saving under user profile optional.
 *
 * summarizeRequest SummarizeRequest Input text or the URL of webpage to be summarized.
 * NOTE: openAPI Validator will reject all requests with 1. no plaintext or url property 2. both plaintext and url properties
 *
 * returns Summary:
 *           id:
 *             type: string
 *             format: uuid
 *           userID:
 *             # username (i.e. alphanumeric) or IDs (i.e. numeric)?
 *             type: string
 *             format: uuid
 *           # if /summarize is called
 *           plaintext:
 *             description: Original text that was summarized.
 *             type: string
 *           # if /summarizeByURL is called
 *           url:
 *             description: URL of webpage that was summarized.
 *             type: string
 *           summarizedText:
 *             type: string
 *           createdAt:
 *             description: Time summary was first requested.
 *             type: string
 *             format: date-time
 * */
const summarizePOST = ({ cookies, summarizeRequest }) =>
  new Promise(async (resolve, reject) => {
    try {
      let user = jwt.verify(cookies.token, process.env.JWT_SECRET); // Only logged in users can call /summarize
      let row = {};
      let response = {};
      // console.log(cookies);
      // console.log(summarizeRequest);
      let text = "";
      if (summarizeRequest.hasOwnProperty("url")) {
        row.url = summarizeRequest.url;
        // Extract text from HTML
        let raw = await (await fetch(summarizeRequest.url)).text();
        text = htmlToText(raw, {
          tags: {
            a: { options: { ignoreHref: true } },
            img: { options: { ignoreHref: true } },
          },
        }).replace(/ *\[[^\]]*\] */g, "");
      } else if (summarizeRequest.hasOwnProperty("plaintext")) {
        row.plaintext = summarizeRequest.plaintext;
        text = summarizeRequest.plaintext;
      } else {
        // This should already be caught by the OpenAPI Validator middleware in server\expressServer.js
        throw new Error("Request should specify either url or plaintext.");
      }
      // console.log(text);
      let apiResponse = await deepai.callStandardApi("summarization", { text });
      console.log(apiResponse);
      console.log(text);
      row.id = apiResponse.id; // Reuse UUID generated by DeepAI
      row.summarizedText = apiResponse.output;
      row.userId = user.userId;
      response = apiResponse;
      const created = await Summary.create(row);
      // console.log(created);
      // TODO: redirect client to summary page with returned summary open
      console.log("/summarize:", created);
      resolve(Service.successResponse(created));
    } catch (e) {
      console.log("/summarize:", e);
      reject(
        Service.rejectResponse(e.message || "Invalid input", e.status || 405)
      );
    }
  });

module.exports = {
  summarizePOST,
};
